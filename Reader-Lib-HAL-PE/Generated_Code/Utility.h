/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : Utility.h
**     Project     : Reader-Lib-HAL-PE
**     Processor   : MC9S12ZVL32MLC
**     Component   : Utility
**     Version     : Component 01.111, Driver 01.00, CPU db: 3.00.000
**     Compiler    : CodeWarrior HCS12Z C Compiler
**     Date/Time   : 2016-02-15, 16:16, # CodeGen: 59
**     Abstract    :
**          Contains various utility functions.
**     Settings    :
**          Component name                                 : Utility
**     Contents    :
**         strcpy         - void Utility_strcpy(uint8_t *dst, size_t dstSize, const unsigned char *src);
**         strcat         - void Utility_strcat(uint8_t *dst, size_t dstSize, const unsigned char *src);
**         strcatPad      - void Utility_strcatPad(uint8_t *dst, size_t dstSize, const unsigned char...
**         chcat          - void Utility_chcat(uint8_t *dst, size_t dstSize, uint8_t ch);
**         Num16uToStr    - void Utility_Num16uToStr(uint8_t *dst, size_t dstSize, uint16_t val);
**         strcatNum16u   - void Utility_strcatNum16u(uint8_t *dst, size_t dstSize, uint16_t val);
**         strcatNum8Hex  - void Utility_strcatNum8Hex(uint8_t *dst, size_t dstSize, uint8_t num);
**         strcatNum16Hex - void Utility_strcatNum16Hex(uint8_t *dst, size_t dstSize, uint16_t num);
**
**     License   :  Open Source (LGPL)
**     Copyright : (c) Copyright Erich Styger, 2014-2015, all rights reserved.
**     xatoi(): Copyright (C) 2010, ChaN, all right reserved. (see copyright notice and license at the function implementation).
**     This an open source software implementing utility functions using Processor Expert.
**     This is a free software and is opened for education,  research and commercial developments under license policy of following terms:
**     * This is a free software and there is NO WARRANTY.
**     * No restriction on use. You can use, modify and redistribute it for
**       personal, non-profit or commercial product UNDER YOUR RESPONSIBILITY.
**     * Redistributions of source code must retain the above copyright notice.
** ###################################################################*/
/*!
** @file Utility.h
** @version 01.00
** @brief
**          Contains various utility functions.
*/         
/*!
**  @addtogroup Utility_module Utility module documentation
**  @{
*/         

#ifndef __Utility_H
#define __Utility_H

/* MODULE Utility. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
#include "PE_Timer.h"
/* Include inherited beans */

#include "Cpu.h"
#include <string.h>
#include <stddef.h> /* for size_t */

#include <stddef.h>

typedef enum {
  Utility_SEP_NUM_TYPE_UINT8, /* uint8_t number type */
  Utility_SEP_NUM_TYPE_UINT8_HEX_NO_PREFIX /* uint8_t hex number type, no 0x prefix */
} Utility_SeparatedNumberType;


void Utility_strcpy(uint8_t *dst, size_t dstSize, const unsigned char *src);
/*
** ===================================================================
**     Method      :  Utility_strcpy (component Utility)
**     Description :
**         Same as normal strcpy, but safe as it does not write beyond
**         the buffer.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * dst             - Pointer to destination string
**         dstSize         - Size of the destination buffer (in
**                           bytes).
**       * src             - Pointer to source string.
**     Returns     : Nothing
** ===================================================================
*/

void Utility_strcat(uint8_t *dst, size_t dstSize, const unsigned char *src);
/*
** ===================================================================
**     Method      :  Utility_strcat (component Utility)
**     Description :
**         Same as normal strcat, but safe as it does not write beyond
**         the buffer.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * dst             - Pointer to destination string
**         dstSize         - Size of the destination buffer (in
**                           bytes).
**       * src             - Pointer to source string.
**     Returns     : Nothing
** ===================================================================
*/

void Utility_strcatNum8Hex(uint8_t *dst, size_t dstSize, uint8_t num);
/*
** ===================================================================
**     Method      :  Utility_strcatNum8Hex (component Utility)
**     Description :
**         Appends a 8bit unsigned value to a buffer as hex number
**         (without a 0x prefix).
**     Parameters  :
**         NAME            - DESCRIPTION
**       * dst             - Pointer to destination string
**         dstSize         - Size of the destination buffer (in
**                           bytes).
**         num             - Value to convert.
**     Returns     : Nothing
** ===================================================================
*/

void Utility_strcatNum16Hex(uint8_t *dst, size_t dstSize, uint16_t num);
/*
** ===================================================================
**     Method      :  Utility_strcatNum16Hex (component Utility)
**     Description :
**         Appends a 16bit unsigned value to a buffer as hex number
**         (without a 0x prefix).
**     Parameters  :
**         NAME            - DESCRIPTION
**       * dst             - Pointer to destination string
**         dstSize         - Size of the destination buffer (in
**                           bytes).
**         num             - Value to convert.
**     Returns     : Nothing
** ===================================================================
*/

void Utility_chcat(uint8_t *dst, size_t dstSize, uint8_t ch);
/*
** ===================================================================
**     Method      :  Utility_chcat (component Utility)
**     Description :
**         Adds a single character to a zero byte terminated buffer. It
**         cares about buffer overflow.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * dst             - Pointer to destination string
**         dstSize         - Size of the destination buffer (in
**                           bytes).
**         ch              - character to append
**     Returns     : Nothing
** ===================================================================
*/

void Utility_Num16uToStr(uint8_t *dst, size_t dstSize, uint16_t val);
/*
** ===================================================================
**     Method      :  Utility_Num16uToStr (component Utility)
**     Description :
**         Converts a signed 16bit value into a string.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * dst             - Pointer to destination string
**         dstSize         - Size of the destination buffer (in
**                           bytes).
**         val             - Value to be converted.
**     Returns     : Nothing
** ===================================================================
*/

void Utility_strcatNum16u(uint8_t *dst, size_t dstSize, uint16_t val);
/*
** ===================================================================
**     Method      :  Utility_strcatNum16u (component Utility)
**     Description :
**         Appends a 16bit unsigned value to a string buffer.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * dst             - Pointer to destination string
**         dstSize         - Size of the destination buffer (in
**                           bytes).
**         val             - Value to convert.
**     Returns     : Nothing
** ===================================================================
*/

void Utility_strcatPad(uint8_t *dst, size_t dstSize, const unsigned char *src, char padChar, uint8_t srcPadSize);
/*
** ===================================================================
**     Method      :  Utility_strcatPad (component Utility)
**     Description :
**         Same as normal strcat, but safe as it does not write beyond
**         the buffer. The buffer will be filled with a pad character
**         for a given length.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * dst             - Pointer to destination string
**         dstSize         - Size of the destination buffer (in
**                           bytes).
**       * src             - Pointer to source string.
**         padChar         - Character to be used for padding
**         srcPadSize      - To which size the src string
**                           has to be padded.
**     Returns     : Nothing
** ===================================================================
*/

/* END Utility. */

#endif
/* ifndef __Utility_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.09]
**     for the Freescale HCS12Z series of microcontrollers.
**
** ###################################################################
*/
