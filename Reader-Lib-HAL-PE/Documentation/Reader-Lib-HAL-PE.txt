=============================================================================
List of generated methods in project: Reader-Lib-HAL-PE

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "SPI"       (component SynchroMaster)
   - SPI_Enable -Enable the component - it starts send and receive functions. Events may be generated 
                ("DisableEvent"/"EnableEvent"). This method cannot be disabled if the Fault mode is enabled. It's intended for 
                re-enabling the module if fault occurred. For more information please see the <"Fault mode" >property .
   - SPI_Disable -Disable the component - it stops the send and receive functions. No events will be generated. Note: When this 
                method is called while a transmission is in progress, the data being transmitted/received may be lost.
   - SPI_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does not 
                wait for data).   For information about SW overrun behavior please see <General info page>.
   - SPI_SendChar -Sends one character to the channel.
   - SPI_GetCharsInRxBuf -Returns the number of characters in the input buffer.  Note: If the Interrupt service is disabled, 
                and the Ignore empty character is set to yes, and a character has been received, then this method returns 1 
                although it was an empty character.
   - SPI_GetCharsInTxBuf -Returns the number of characters in the output buffer.

Module "PIN_RESET" (component BitIO)
   - PIN_RESET_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - PIN_RESET_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - PIN_RESET_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - PIN_RESET_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "PIN_SSEL"  (component BitIO)
   - PIN_SSEL_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - PIN_SSEL_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory 
                or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - PIN_SSEL_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - PIN_SSEL_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "LED_BIT"   (component BitIO)
   - LED_BIT_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - LED_BIT_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.
   - LED_BIT_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "TMR0"      (component TimerInt)
   - TMR0_Enable -This method enables the component - it starts the timer. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - TMR0_Disable -This method disables the component - it stops the timer. No events will be generated.
   - TMR0_EnableEvent -This method enables the events.
   - TMR0_DisableEvent -This method disables the events.
   - TMR0_SetPeriodUS -This method sets the new period of the generated events. The period is expressed in [microseconds] as a 
                16-bit unsigned integer number. This method is available only if the runtime setting type 'from interval' is 
                selected in the <Timing dialog box> in the Runtime setting area.
   - TMR0_SetPeriodMS -This method sets the new period of the generated events. The period is expressed in [milliseconds] as a 
                16-bit unsigned integer number. This method is available only if the runtime setting type 'from interval' is 
                selected in the <Timing dialog box> in the Runtime setting area.

Module "TMR1"      (component TimerInt)
   - TMR1_Enable -This method enables the component - it starts the timer. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - TMR1_Disable -This method disables the component - it stops the timer. No events will be generated.
   - TMR1_EnableEvent -This method enables the events.
   - TMR1_DisableEvent -This method disables the events.
   - TMR1_SetPeriodUS -This method sets the new period of the generated events. The period is expressed in [microseconds] as a 
                16-bit unsigned integer number. This method is available only if the runtime setting type 'from interval' is 
                selected in the <Timing dialog box> in the Runtime setting area.
   - TMR1_SetPeriodMS -This method sets the new period of the generated events. The period is expressed in [milliseconds] as a 
                16-bit unsigned integer number. This method is available only if the runtime setting type 'from interval' is 
                selected in the <Timing dialog box> in the Runtime setting area.

Module "TMR2"      (component TimerInt)
   - TMR2_Enable -This method enables the component - it starts the timer. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - TMR2_Disable -This method disables the component - it stops the timer. No events will be generated.
   - TMR2_EnableEvent -This method enables the events.
   - TMR2_DisableEvent -This method disables the events.
   - TMR2_SetPeriodUS -This method sets the new period of the generated events. The period is expressed in [microseconds] as a 
                16-bit unsigned integer number. This method is available only if the runtime setting type 'from interval' is 
                selected in the <Timing dialog box> in the Runtime setting area.
   - TMR2_SetPeriodMS -This method sets the new period of the generated events. The period is expressed in [milliseconds] as a 
                16-bit unsigned integer number. This method is available only if the runtime setting type 'from interval' is 
                selected in the <Timing dialog box> in the Runtime setting area.

Module "Terminal"  (component Term)
   - Terminal_CRLF -Send CRLF to terminal.
   - Terminal_SendStr -Send string to terminal.
   - Terminal_SendNum -Send number to terminal.
   - Terminal_SendChar -Send char to terminal.
   - Terminal_Cls -Clear the terminal window.
   - Terminal_MoveTo -Move cursor to position x, y. Range of coordinates can be from 1 to the size, which depends on the used 
                terminal. Position [1,1] represents the upper left corner.
   - Terminal_ReadChar -Read char from terminal.
   - Terminal_KeyPressed -Test if char was received from the terminal.

Module "Utility"   (component Utility)
   - Utility_strcpy -Same as normal strcpy, but safe as it does not write beyond the buffer.
   - Utility_strcat -Same as normal strcat, but safe as it does not write beyond the buffer.
   - Utility_strcatPad -Same as normal strcat, but safe as it does not write beyond the buffer. The buffer will be filled with 
                a pad character for a given length.
   - Utility_chcat -Adds a single character to a zero byte terminated buffer. It cares about buffer overflow.
   - Utility_Num16uToStr -Converts a signed 16bit value into a string.
   - Utility_strcatNum16u -Appends a 16bit unsigned value to a string buffer.
   - Utility_strcatNum8Hex -Appends a 8bit unsigned value to a buffer as hex number (without a 0x prefix).
   - Utility_strcatNum16Hex -Appends a 16bit unsigned value to a buffer as hex number (without a 0x prefix).

Module "LED_R_BIT" (component BitIO)
   - LED_R_BIT_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - LED_R_BIT_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.
   - LED_R_BIT_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.

Module "EN_PWR"    (component BitIO)
   - EN_PWR_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - EN_PWR_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "Cpu"       (component MC9S12ZVL32_32)
   - Cpu_EnableInt -Enable maskable interrupts
   - Cpu_DisableInt -Disable maskable interrupts
   - Cpu_SetWaitMode -Set low power mode - Wait mode.   For more information about the wait mode see documentation of this CPU. 
                Release from Wait mode: Reset or interrupt
   - Cpu_SetStopMode -Set low power mode - Stop mode.   For more information about the stop mode see documentation of this CPU.
   - Cpu_Delay100US -This method realizes software delay. The length of delay is at least 100 microsecond multiply input 
                parameter [us100]. As the delay implementation is not based on real clock, the delay time may be increased by 
                interrupt service routines processed during the delay. The method is independent on selected speed mode.

===================================================================================
